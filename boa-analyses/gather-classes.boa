p: Project = input;

#list of all classes in the project
cls: output collection[string] of string;

# (subclass fqn) -> superclass fqn
sts: output collection[string][string] of string;
# ========== Constants ===========

NO_PARENT := "no_parent";
# ======== End Constants =========

# given the ASTroot of a file it will return the name of the package
# the file is in.
getPackageName := function (root: ASTRoot): string {
    temp := "";
    foreach (i: int; def(root.namespaces[i])) {
        if(i == 0) 
            temp = format("%s", root.namespaces[i].name); 
        else
            temp = format("%s.%s", temp, root.namespaces[i].name); 
    }
    return temp;
};

fullyQualifiedName:= function (currPckg: string, typeName: string) : string{
    return format("%s.%s", currPckg, typeName);
};

# return a map from the fully qualified name of a class to the Declaration
# ast node of that class. The map contains the mapping for all classes in the
# project.
gatherAllClasses:= function(proj: Project) : map[string] of Declaration {
    currentPackageName: string;
    nameToDecl: map[string] of Declaration;
    
    visit(proj, visitor{
        before repo: CodeRepository -> {
            snapshot := getsnapshot(repo);
            foreach (i: int; def(snapshot[i])) {
                visit(snapshot[i]);
            }
        stop;
        } # end visit Code Repository;
    
        before root: ASTRoot -> {
            currentPackageName = getPackageName(root);
        } #end ASTRoot
            
        before decl: Declaration -> {
            if (decl.kind == TypeKind.CLASS) {
                fqn := fullyQualifiedName(currentPackageName, decl.name);
                nameToDecl[fqn] = decl;
            }
            stop;
        }
    }); #end visitor definition
    
    return nameToDecl;
};

hasClassSupertype := function(decl: Declaration): bool {
    if (def(decl.parents)) {
        foreach(i: int; def(decl.parents[i])) {
            if(decl.parents[i].kind == TypeKind.CLASS)
                return true;
        }
    }
    return false;
};

getClassParentName := function(decl: Declaration): string {
    if (def(decl.parents)) {
        foreach(i: int; def(decl.parents[i])) {
            if(decl.parents[i].kind == TypeKind.CLASS)
                return decl.parents[i].name;
        }
    }
    #error_log[p.id][ERR_MINOR] << format("getClassParentName called on decl with no parent. class = %s", decl.name);
    return "BUG_BUG_BUG";
};

getFullyQualNameOfSuper := function(classes: map[string] of Declaration, currentImports: array of string, currPackage: string, decl: Declaration): string {
    parentSimple := getClassParentName(decl);
    #in case the class was referenced by it's fqn in the extends
    #clause then we look directly;
    if(haskey(classes, parentSimple)) {
        return parentSimple;
    }
                    
    #if the superclass is in the current package;
    parentFQN := fullyQualifiedName(currPackage, parentSimple);
    if(haskey(classes, parentFQN)) {
        return parentFQN;
    }
                    
    #look to see if the parent superclass is in one of the imports.
    foreach(i: int; def(currentImports[i])) {
        import := currentImports[i];
        #in case parent is imported explicitely;
        if(haskey(classes, import) && match(parentSimple, import)) {
            parentFQN = import;
            return parentFQN;
        }
                        
        #in case parent is imported with a wildcard;
        if (match(`\.\*`, import)) {
            newImport := strreplace(import, ".*", "", true);
            parentFQN = fullyQualifiedName(newImport, parentSimple);
            if(haskey(classes, parentFQN)) {
                return parentFQN;
            }
        }
    }#end import foreach; 
    return NO_PARENT;
};

# given a map of all classes it will map all fully qualified names
# of classes to the fully qualified names of their super-types.
# only class extension is considered.
gatherSupertypes:= function(proj: Project, classes: map[string] of Declaration) : map[string] of string {
    currentPackageName: string;
    currentImports: array of string;
    typeToSuper: map[string] of string;
    
    visit(proj, visitor{
        before repo: CodeRepository -> {
            snapshot := getsnapshot(repo);
            foreach (i: int; def(snapshot[i])) {
                visit(snapshot[i]);
            }
        stop;
        } # end visit Code Repository;
    
        before root: ASTRoot -> {
            currentPackageName = getPackageName(root);
            temp : map[string] of bool;
            foreach(i: int; def(root.imports[i]))
                temp[root.imports[i]] = true;
                
            currentImports = keys(temp);
        } #end ASTRoot
            
        before decl: Declaration -> {
            if (decl.kind == TypeKind.CLASS) {
                if (hasClassSupertype(decl)) {
                    currFQN := fullyQualifiedName(currentPackageName, decl.name);
                    superFQN := getFullyQualNameOfSuper(classes, currentImports, currentPackageName, decl);
                    if(!match(superFQN, NO_PARENT)) {
                        typeToSuper[currFQN] = superFQN;
                        sts[p.id][currFQN] << superFQN;
                        projId := format("%s###%s###%s", p.id, p.name, p.project_url);
                        cls[currFQN] << projId;
                        cls[superFQN] << projId;
                    }

                }
            }
            stop;
        }# end declration visitor
    }); #end visitor definition
    
    return typeToSuper;
};

#if(match(`109474`, p.id)){

classes := gatherAllClasses(p);
typeToSuper := gatherSupertypes(p, classes);