p: Project = input;
error_log: output collection[string][string] of string;

totalNumberOfSubtypeRelationships: output sum of int;
totalNumberOfOverridenMethods: output sum of int;

numberOfClassLevelBSViolations: output sum of int;
numberOfMethodLevelBSViolations: output sum of int;


# (project id, $fqnSubtype extends $fqnSupertype, methodName(typeSignature)) ->
# 0/1 child={subEffects}  super={superEffects}
r: output collection[string][string][string] of string;

# ========== Constants ===========
ERR_MINOR := "minor error";
ERR_FATAL := "fatal error";

EMPTY_SIG := "____empty_sig_____";
CTOR_NAME := "<init>";
# ======== End Constants =========

strCombine := function (strings: array of string, sep: string): string {
    combined := "";
    foreach (i: int; def(strings[i])) {
        combined = format("%s%s%s", combined, sep, strings[i]);
    }
    return combined;
};

# given the ASTroot of a file it will return the name of the package
# the file is in.
getPackageName := function (root: ASTRoot): string {
    temp := "";
    foreach (i: int; def(root.namespaces[i])) {
        if(i == 0) 
            temp = format("%s", root.namespaces[i].name); 
        else
            temp = format("%s.%s", temp, root.namespaces[i].name); 
    }
    return temp;
};

fullyQualifiedName:= function (currPckg: string, typeName: string) : string{
    return format("%s.%s", currPckg, typeName);
};


# return a map from the fully qualified name of a class to the Declaration
# ast node of that class. The map contains the mapping for all classes in the
# project.
gatherAllClasses:= function(proj: Project) : map[string] of Declaration {
    currentPackageName: string;
    nameToDecl: map[string] of Declaration;
    
    visit(proj, visitor{
        before repo: CodeRepository -> {
            snapshot := getsnapshot(repo);
            foreach (i: int; def(snapshot[i])) {
                visit(snapshot[i]);
            }
        stop;
        } # end visit Code Repository;
    
        before root: ASTRoot -> {
            currentPackageName = getPackageName(root);
        } #end ASTRoot
            
        before decl: Declaration -> {
            if (decl.kind == TypeKind.CLASS) {
                fqn := fullyQualifiedName(currentPackageName, decl.name);
                nameToDecl[fqn] = decl;
            }
            stop;
        }
    }); #end visitor definition
    
    return nameToDecl;
};

hasClassSupertype := function(decl: Declaration): bool {
    if (def(decl.parents)) {
        foreach(i: int; def(decl.parents[i])) {
            if(decl.parents[i].kind == TypeKind.CLASS)
                return true;
        }
    }
    return false;
};

getClassParentName := function(decl: Declaration): string {
    if (def(decl.parents)) {
        foreach(i: int; def(decl.parents[i])) {
            if(decl.parents[i].kind == TypeKind.CLASS)
                return decl.parents[i].name;
        }
    }
    error_log[p.id][ERR_MINOR] << format("getClassParentName called on decl with no parent. class = %s", decl.name);
    return "BUG_BUG_BUG";
};

# given a map of all classes it will map all fully qualified names
# of classes to the fully qualified names of their super-types.
# only class extension is considered.
gatherSupertypes:= function(proj: Project, classes: map[string] of Declaration) : map[string] of string {
    currentPackageName: string;
    currentImports: array of string;
    typeToSuper: map[string] of string;
    
    visit(proj, visitor{
        before repo: CodeRepository -> {
            snapshot := getsnapshot(repo);
            foreach (i: int; def(snapshot[i])) {
                visit(snapshot[i]);
            }
        stop;
        } # end visit Code Repository;
    
        before root: ASTRoot -> {
            currentPackageName = getPackageName(root);
            temp : map[string] of bool;
            foreach(i: int; def(root.imports[i]))
                temp[root.imports[i]] = true;
                
            currentImports = keys(temp);
        } #end ASTRoot
            
        before decl: Declaration -> {
            if (decl.kind == TypeKind.CLASS) {
                if (hasClassSupertype(decl)) {
                    currFQN := fullyQualifiedName(currentPackageName, decl.name);
                    parentSimple := getClassParentName(decl);
                    #in case the class was referenced by it's fqn in the extends
                    #clause then we look directly;
                    if(haskey(classes, parentSimple)) {
                        typeToSuper[currFQN] = parentSimple;
                        stop;
                    }
                    
                    #if the superclass is in the current package;
                    parentFQN := fullyQualifiedName(currentPackageName, parentSimple);
                    if(haskey(classes, parentFQN)) {
                        typeToSuper[currFQN] = parentFQN;
                        stop;
                    }
                    
                    #look to see if the parent superclass is in one of the imports.
                    foreach(i: int; def(currentImports[i])) {
                        import := currentImports[i];
                        #in case parent is imported explicitely;
                        if(haskey(classes, import) && match(parentSimple, import)) {
                            typeToSuper[currFQN] = parentFQN;
                            stop;
                        }
                        
                        #in case parent is imported with a wildcard;
                        if (match(`\.\*`, import)) {
                            newImport := strreplace(import, ".*", "", true);
                            parentFQN = fullyQualifiedName(newImport, parentSimple);
                            if(haskey(classes, parentFQN)) {
                                typeToSuper[currFQN] = parentFQN;
                                stop;
                            }
                        }
                    }#end import foreach;
                }
            }
            stop;
        }# end declration visitor
    }); #end visitor definition
    
    return typeToSuper;
};

# given two arrays of effects it determines whether or not the
# difference between the two sets constitutes a violation;
isBehaviouralViolation := function(subEff: array of string, superEff: array of string): bool {
    if (len(subEff) != len(superEff))
        return false;
    else {
        ifall(i: int; match(subEff[i], superEff[i]))
            return true;
    }
    return false;
};

#===================================
#               DEBUG
#===================================
#subType, superType, methodName -> typeSignature
debug_getMethods:output collection[string][string][string] of string;

#===================================
#             End DEBUG
#===================================

getFieldsOfSuperClass := function(classes: map[string] of Declaration, fqnOfSuper: string): map[string] of bool {
    fields: map[string] of bool;
    
    if(!haskey(classes, fqnOfSuper)) {
        error_log[p.id][ERR_MINOR] << format("getFieldsOfSuperClass, could not find super type: %s", fqnOfSuper);
        return fields;
    }
    
    superDecl := classes[fqnOfSuper];
    foreach (i: int; def(superDecl.fields[i])) {
        fields[superDecl.fields[i].name] = true;
    }
    return fields;
};

# this function assumes that the class and super class are contained in the classes map. This
# function should be called only after we have constructed a full classes map.
#
# it will return a union of the fields found in the super-type and the fields found in the subtype
getFieldsOfChildClass := function(classes: map[string] of Declaration, fqnOfChild: string, fqnOfSuper: string): map[string] of bool {
    fields: map[string] of bool;
    
    if(!haskey(classes, fqnOfChild)) {
        error_log[p.id][ERR_MINOR] << format("getFieldsOfClass, could not find child type: %s", fqnOfChild);
        return fields;
    }
    
    fields = getFieldsOfSuperClass(classes, fqnOfSuper); 
    if(!def(fields))
        return fields;

    childDecl := classes[fqnOfChild];
    foreach (i: int; def(childDecl.fields[i])) {
        fields[childDecl.fields[i].name] = true;
    }
    
    return fields;
};

#given a set of fields and a method it computes the effects of this methods.
getEffectsOfMethod := function(fieldsOfClass: map[string] of bool, method: Method) : array of string {
  tempEffects: map[string] of bool;

  visit(method, visitor {
    before n: Method -> {
        clear(tempEffects);
        foreach (i: int; def(n.statements[i]))
            visit(n.statements[i]);
        stop;
    }#end method visitor

    before n: Expression -> {
        if (n.kind == ExpressionKind.ASSIGN &&
            n.expressions[0].kind == ExpressionKind.VARACCESS &&
            haskey(fieldsOfClass, n.expressions[0].variable)) {
            
            if(!haskey(tempEffects, n.expressions[0].variable))
                tempEffects[n.expressions[0].variable] = true;
        }
        stop;
    }#end visit expression
  });#end visitor
  
  return keys(tempEffects);
};

argumentsMatch :=  function(subArgs: Method, superArgs: Method): bool {
    if(len(subArgs.arguments) != len(superArgs.arguments))
        return false;
    ifall(i: int; match(subArgs.arguments[i].variable_type.name, superArgs.arguments[i].variable_type.name))
        return true;
    return false;
};

isOverriden := function(subM: Method, superM: Method): bool {
    return match(subM.name, superM.name) &&
        argumentsMatch(subM, superM);
};

typeSignature := function (m: Method): string {
    sig := "";
    if (len(m.arguments) == 0)
        return EMPTY_SIG;
    foreach(i: int; def(m.arguments[i])) {
        sig = format("%s, %s", m.arguments[i].variable_type.name);
    }
    return sig;
};

isAbstract := function(m: Method) : bool {
    foreach(i: int; def(m.modifiers[i])) {
        if(m.modifiers[i].kind == ModifierKind.ABSTRACT)
            return true;
    }
    return false;
};

isConstructor := function(m: Method): bool {
    return match(m.name, CTOR_NAME);
};

isViable := function(m: Method) : bool {
    return def(m) && !isConstructor(m) && !isAbstract(m);
};

# return a (method.name -> typeSignature). The signature as computed by the above method.
# This was necessary because I couldnt return collections of collections;
getOverridenMethodNames := function(subDecl: Declaration, superDecl:Declaration): map[string] of string {
    meths: map[string] of string;
    foreach(i: int; isViable(superDecl.methods[i])) {
        superM := superDecl.methods[i];
        foreach(j: int; isViable(subDecl.methods[j])) {
            subM := subDecl.methods[j];
            if(isOverriden(subM, superM)) {
                meths[subM.name] = typeSignature(subM);
                
                debug_getMethods[subDecl.name][superDecl.name][subM.name] << typeSignature(subM); 
            }
        }
    }
    return meths;
};

# finds a method given its name, its type signature in string form as computed
# by the function "typeSignature".
# This function assumes that it is called only with values resulted from a call
# to getOverridenMethodNames;
findMethod := function(name: string, sig: string, decl: Declaration) : Method {
    foreach(i: int; def(decl.methods[i])) {
        m := decl.methods[i];
        if(match(m.name, name) && match(sig, typeSignature(m)))
            return m;
    }
    error_log[p.id][ERR_FATAL] << format("findMethod could not find method %s(%s)", name, sig);
    return decl.methods[0];
};

compare := function(classes: map[string] of Declaration, subToSuper: map[string] of string): string {
    numOfClassLevel := 0;
    numOfMethLevel := 0;
    numOfOverridenMeths := 0;
    
    childTypes := keys(subToSuper);
    foreach(i: int; def(childTypes[i])) {
        classLevelViolation := false;
        
        fqnChild := childTypes[i];
        fqnSuper := subToSuper[fqnChild];
        declChild := classes[fqnChild];
        declSuper := classes[fqnSuper];
        overridenMeths := getOverridenMethodNames(declChild, declSuper);
        numOfOverridenMeths = numOfOverridenMeths + 1;
        overridenMethdNames := keys(overridenMeths);
        foreach(j: int; def(overridenMethdNames[j])) {
            ovMethName := overridenMethdNames[j];
            typeSign := overridenMeths[ovMethName];
            superMeth := findMethod(ovMethName, typeSign, declSuper);
            childMeth := findMethod(ovMethName, typeSign, declChild);

            fieldsOfSuper := getFieldsOfSuperClass(classes, fqnSuper);
            fieldsOfChild := getFieldsOfChildClass(classes, fqnChild, fqnSuper);
            
            effectsOfSuper := getEffectsOfMethod(fieldsOfSuper, superMeth);
            effectsOfChild := getEffectsOfMethod(fieldsOfChild, childMeth);
            
            violation := isBehaviouralViolation(effectsOfChild, effectsOfSuper);
            if (!classLevelViolation && violation) {
                    classLevelViolation = true;
            } else if (violation) {
                numOfMethLevel = numOfMethLevel + 1;
            }
            typeKey := format("%s extends %s", fqnChild, fqnSuper);
            methKey := format("%s-%s-",ovMethName, typeSign);
            combinedEffChild := strCombine(effectsOfChild, " ");
            combinedEffSuper := strCombine(effectsOfSuper, " ");
            verdict := "0";
            if (violation) verdict = "1";
            message := format("%s child={%s}  super={%s}", verdict, combinedEffChild, combinedEffSuper);
            r[p.id][typeKey][methKey] << message;
        } #end foreach methods
        if (classLevelViolation)
            numOfClassLevel = numOfClassLevel + 1;
    } #end foreach types
    
    numberOfClassLevelBSViolations << numOfClassLevel;
    numberOfMethodLevelBSViolations << numOfMethLevel;
    totalNumberOfOverridenMethods << numOfOverridenMeths;
    return "";
};

if(match(`109474`, p.id)){
#totalNumberOfOverridenMethods: output sum of int;

#numberOfClassLevelBSViolations: output sum of int;
#numberOfMethodLevelBSViolations: output sum of int;
#classes := gatherAllClasses(p);
#typeToSuper := gatherSupertypes(p, classes);
totalNumberOfSubtypeRelationships << 1;#len(typeToSuper);


}